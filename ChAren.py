# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ChAren.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import json
import time
import sys


api_key = "<Put your Riot API Key here>"
queue_id = "1700"

def getChampionsData():
    api_url = (
        "https://ddragon.leagueoflegends.com/cdn/14.13.1/data/en_US/champion.json")
    return requests.get(api_url).json()

def getChampionImg(ChampionName):
    img_url = (
    "https://ddragon.leagueoflegends.com/cdn/14.13.1/img/champion/" +
    ChampionName +
    ".png")
    return requests.get(img_url).content

def getSummonerData(game_name, game_tag):
    api_url = (
        "https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/" +
        game_name +
        "/" +
        game_tag +
        "?api_key=" +
        api_key)
    resp = requests.get(api_url)
    account_data = resp.json()

    if not account_data.get("status"):
        user_puuid = account_data["puuid"]
        api_url = (
            "https://eun1.api.riotgames.com/lol/summoner/v4/summoners/by-puuid/" +
            user_puuid +
            "?api_key=" +
            api_key)
        summoner_data = requests.get(api_url).json()
        return None if summoner_data.get("status") else summoner_data

def getSummonerIcon(IconId):
    img_url = (
        "https://ddragon.leagueoflegends.com/cdn/14.13.1/img/profileicon/" +
        str(IconId) +
        ".png")
    return requests.get(img_url).content

def getMatches(puuid, LastMatch):
    i = 0
    matchesList = []
    while True:
        api_url = (
            "https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/" +
            puuid +
            "/ids?" +
            "startTime=" +
            str(LastMatch) +
            "&queue=" +
            queue_id +
            "&start=" +
            str(i*100) +
            "&count=100" +
            "&api_key=" +
            api_key)
        resp = requests.get(api_url).json()
        if type(resp) != type(list()):
            if resp["status"]["status_code"] == 429:
                return 429
            else:
                return None

        matchesList += resp

        if not len(resp):
            return matchesList
        i += 1

def getMatchData(MatchId):
    api_url = (
        "https://europe.api.riotgames.com/lol/match/v5/matches/" +
        MatchId +
        "?api_key=" +
        api_key)
    resp = requests.get(api_url).json()

    if resp.get("status"):
        if resp["status"]["status_code"] == 429:
            return 429
        else:
            return None
    return resp
        
        

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #Variables
        self.bHidden = True
        self.bFavorite = False
        data = getChampionsData()
        self.championsData, self.version = data["data"], data["version"]
        self.championsList = list(self.championsData.keys())
        self.JSON_champions = self.importJsonChampion()
        self.dataCheck()
        self.JSON_user = self.importJsonUser()
        if self.JSON_user:
            self.summonerData = getSummonerData(self.JSON_user["name"], self.JSON_user["tag"])
        else:
            self.summonerData = None
            self.JSON_user = {}
        
        #Main Window
        MainWindow.setObjectName("ChAren")
        MainWindow.resize(1020, 600)
        MainWindow.setMinimumSize(QtCore.QSize(600, 250))
        MainWindow.setWindowIcon(QtGui.QIcon("imgs/poro.png"))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)

        #Cental Widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")

        #Stacked Widget
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setObjectName("stackedWidget")
        
        #Page - Main
        self.P_Main = QtWidgets.QWidget()
        self.P_Main.setObjectName("P_Main")
        self.VL_Main = QtWidgets.QVBoxLayout(self.P_Main)
        self.VL_Main.setContentsMargins(0, 0, 0, 0)
        self.VL_Main.setSpacing(0)
        self.VL_Main.setObjectName("VL_Main")

        self.W_Menu = QtWidgets.QWidget(self.P_Main) #Menu
        self.W_Menu.setMinimumSize(QtCore.QSize(0, 120))
        self.W_Menu.setMaximumSize(QtCore.QSize(16777215, 120))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(17, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.W_Menu.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setBold(True)
        font.setWeight(75)
        self.W_Menu.setFont(font)
        self.W_Menu.setAutoFillBackground(True)
        self.W_Menu.setObjectName("W_Menu")
        self.HL_Menu = QtWidgets.QHBoxLayout(self.W_Menu)
        self.HL_Menu.setContentsMargins(0, 0, 0, 0)
        self.HL_Menu.setObjectName("HL_Menu")

        self.W_Menu_Tab = QtWidgets.QWidget(self.W_Menu)
        self.W_Menu_Tab.setMinimumSize(QtCore.QSize(300, 120))
        self.W_Menu_Tab.setMaximumSize(QtCore.QSize(300, 120))
        self.W_Menu_Tab.setObjectName("W_Menu_Tab")
        self.VL_Menu_Tab_1 = QtWidgets.QVBoxLayout(self.W_Menu_Tab)
        self.VL_Menu_Tab_1.setContentsMargins(5, 5, 5, 5)
        self.VL_Menu_Tab_1.setSpacing(5)
        self.VL_Menu_Tab_1.setObjectName("VL_Menu_Tab_1")
        self.HL_Menu_Tab_1 = QtWidgets.QHBoxLayout()
        self.HL_Menu_Tab_1.setSpacing(0)
        self.HL_Menu_Tab_1.setObjectName("HL_Menu_Tab_1")
        
        palette_B = QtGui.QPalette()    #Set Pallete for Buttons in Menu
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette_B.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette_B.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette_B.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)

        self.B_Challenge = QtWidgets.QPushButton(self.W_Menu_Tab)
        self.B_Challenge.setMinimumSize(QtCore.QSize(280, 50))
        self.B_Challenge.setPalette(palette_B)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.B_Challenge.setFont(font)
        self.B_Challenge.setStyleSheet("background-color: rgb(42, 42, 42);")
        self.B_Challenge.setObjectName("B_Challenge")
        self.HL_Menu_Tab_1.addWidget(self.B_Challenge)
        self.VL_Menu_Tab_1.addLayout(self.HL_Menu_Tab_1)

        self.HL_Menu_Tab_2 = QtWidgets.QHBoxLayout()
        self.HL_Menu_Tab_2.setSpacing(5)
        self.HL_Menu_Tab_2.setObjectName("HL_Menu_Tab_2")
        self.B_All = QtWidgets.QPushButton(self.W_Menu_Tab)
        self.B_All.setMinimumSize(QtCore.QSize(90, 50))
        self.B_All.setPalette(palette_B)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.B_All.setFont(font)
        self.B_All.setStyleSheet("background-color: rgb(42, 42, 42);")
        self.B_All.setObjectName("B_All")
        self.HL_Menu_Tab_2.addWidget(self.B_All)

        self.B_Favorite = QtWidgets.QPushButton(self.W_Menu_Tab)
        self.B_Favorite.setMinimumSize(QtCore.QSize(90, 50))
        self.B_Favorite.setPalette(palette_B)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.B_Favorite.setFont(font)
        self.B_Favorite.setStyleSheet("background-color: rgb(42, 42, 42);")
        self.B_Favorite.setObjectName("B_Favorite")
        self.HL_Menu_Tab_2.addWidget(self.B_Favorite)
        
        self.VL_Menu_Tab_2 = QtWidgets.QVBoxLayout()
        self.VL_Menu_Tab_2.setSpacing(5)
        self.VL_Menu_Tab_2.setObjectName("VL_Menu_Tab_2")

        self.W_CheckBox = QtWidgets.QWidget(self.W_Menu_Tab)
        self.W_CheckBox.setMaximumSize(QtCore.QSize(88, 16777215))
        palette = QtGui.QPalette()    #Set Pallete for Buttons in Menu
        brush = QtGui.QBrush(QtGui.QColor(42, 42, 42))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 42, 42))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 42, 42))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.W_CheckBox.setPalette(palette)
        self.W_CheckBox.setAutoFillBackground(True)
        self.W_CheckBox.setObjectName("W_CheckBox")
        self.HL_CheckBox = QtWidgets.QHBoxLayout(self.W_CheckBox)
        self.HL_CheckBox.setContentsMargins(0, 0, 0, 0)
        self.HL_CheckBox.setSpacing(0)
        self.HL_CheckBox.setObjectName("HL_CheckBox")

        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.HL_CheckBox.addItem(spacerItem)
        
        self.CB_Hidden = QtWidgets.QCheckBox(self.W_CheckBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CB_Hidden.setFont(font)
        self.CB_Hidden.setObjectName("CB_Hidden")
        self.HL_CheckBox.addWidget(self.CB_Hidden)

        spacerItem1 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.HL_CheckBox.addItem(spacerItem1)
        self.VL_Menu_Tab_2.addWidget(self.W_CheckBox)

        self.B_Reload = QtWidgets.QPushButton(self.W_Menu_Tab)
        self.B_Reload.setEnabled(True)
        self.B_Reload.setMinimumSize(QtCore.QSize(90, 22))
        self.B_Reload.setPalette(palette_B)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.B_Reload.setFont(font)
        self.B_Reload.setStyleSheet("background-color: rgb(42, 42, 42);")
        icon_Reload = QtGui.QIcon()
        icon_Reload.addPixmap(QtGui.QPixmap("imgs/ReloadWhite.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Reload.setIcon(icon_Reload)
        self.B_Reload.setObjectName("B_Reload")
        self.VL_Menu_Tab_2.addWidget(self.B_Reload)
        self.HL_Menu_Tab_2.addLayout(self.VL_Menu_Tab_2)
        self.VL_Menu_Tab_1.addLayout(self.HL_Menu_Tab_2)
        self.HL_Menu.addWidget(self.W_Menu_Tab)

        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.HL_Menu.addItem(spacerItem2)

        self.B_Edit_Profile = QtWidgets.QPushButton(self.W_Menu)
        self.B_Edit_Profile.setMinimumSize(QtCore.QSize(110, 110))
        self.B_Edit_Profile.setPalette(palette_B)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.B_Edit_Profile.setFont(font)
        self.B_Edit_Profile.setStyleSheet("background-color: rgb(42, 42, 42);")
        self.B_Edit_Profile.setObjectName("B_Edit_Profile")
        self.HL_Menu.addWidget(self.B_Edit_Profile)

        self.W_Profile = QtWidgets.QWidget(self.W_Menu)
        self.W_Profile.setMinimumSize(QtCore.QSize(120, 120))
        self.W_Profile.setObjectName("W_Profile")
        self.VL_Profile = QtWidgets.QVBoxLayout(self.W_Profile)
        self.VL_Profile.setContentsMargins(5, 5, 5, 5)
        self.VL_Profile.setSpacing(0)
        self.VL_Profile.setObjectName("VL_Profile")
        self.W_Profile_img = QtWidgets.QWidget(self.W_Profile)
        self.W_Profile_img.setObjectName("W_Profile_img")
        self.HL_Profile_img = QtWidgets.QHBoxLayout(self.W_Profile_img)
        self.HL_Profile_img.setContentsMargins(0, 0, 0, 0)
        self.HL_Profile_img.setSpacing(0)
        self.HL_Profile_img.setObjectName("HL_Profile_img")
        self.L_Profile_img = QtWidgets.QLabel(self.W_Profile_img)
        self.L_Profile_img.setMinimumSize(QtCore.QSize(80, 80))
        self.L_Profile_img.setMaximumSize(QtCore.QSize(80, 80))
        if self.summonerData:
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(getSummonerIcon(self.summonerData["profileIconId"]))
            self.L_Profile_img.setPixmap(pixmap)
        else:
            self.L_Profile_img.setPixmap(QtGui.QPixmap("imgs/QuestionMarkWhite.png"))
        self.L_Profile_img.setScaledContents(True)
        self.L_Profile_img.setObjectName("L_Profile_img")
        self.HL_Profile_img.addWidget(self.L_Profile_img)
        self.VL_Profile.addWidget(self.W_Profile_img)

        self.L_Summoner_data = QtWidgets.QLabel(self.W_Profile)
        self.L_Summoner_data.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.L_Summoner_data.setFont(font)
        self.L_Summoner_data.setAlignment(QtCore.Qt.AlignCenter)
        self.L_Summoner_data.setObjectName("L_Summoner_data")
        self.VL_Profile.addWidget(self.L_Summoner_data)
        self.HL_Menu.addWidget(self.W_Profile)
        self.VL_Main.addWidget(self.W_Menu)

        self.SA_Champion_List = QtWidgets.QScrollArea(self.P_Main) #Champion List
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold SemiConden")
        font.setPointSize(12)
        self.SA_Champion_List.setFont(font)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(141, 141, 141))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(141, 141, 141))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(141, 141, 141))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.SA_Champion_List.setPalette(palette)
        self.SA_Champion_List.setAutoFillBackground(True)
        self.SA_Champion_List.setObjectName("SA_Champion_List")

        self.palette_Champ = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette_Champ.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette_Champ.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette_Champ.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)

        self.iconFavOff = QtGui.QIcon()
        self.iconFavOff.addPixmap(QtGui.QPixmap("imgs/FavoriteStarOff.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.iconFavOn = QtGui.QIcon()
        self.iconFavOn.addPixmap(QtGui.QPixmap("imgs/FavoriteStarOn.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)


        if (self.JSON_champions):
            self.createChampionWidgets()
            self.displayChampionList(0)
        else:
            MainWindow.setEnabled(False)


        self.VL_Main.addWidget(self.SA_Champion_List)
        self.stackedWidget.addWidget(self.P_Main)

        #Page - Settings
        self.P_Settings = QtWidgets.QWidget()
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(70, 70, 70))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(70, 70, 70))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(70, 70, 70))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.P_Settings.setPalette(palette)
        self.P_Settings.setAutoFillBackground(True)
        self.P_Settings.setObjectName("P_Settings")

        self.In_Name = QtWidgets.QLineEdit(self.P_Settings)
        self.In_Name.setGeometry(QtCore.QRect(70, 110, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.In_Name.setFont(font)
        self.In_Name.setStyleSheet("background-color : rgb(144, 144, 144); padding : 5;")
        self.In_Name.setFrame(False)
        self.In_Name.setObjectName("In_Name")

        self.In_Tag = QtWidgets.QLineEdit(self.P_Settings)
        self.In_Tag.setGeometry(QtCore.QRect(70, 180, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.In_Tag.setFont(font)
        self.In_Tag.setStyleSheet("background-color : rgb(144, 144, 144); padding : 5;")
        self.In_Tag.setFrame(False)
        self.In_Tag.setObjectName("In_Tag")

        self.B_Send = QtWidgets.QPushButton(self.P_Settings)
        self.B_Send.setGeometry(QtCore.QRect(70, 250, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.B_Send.setFont(font)
        self.B_Send.setStyleSheet("background-color: rgb(47, 47, 47);")
        self.B_Send.setObjectName("B_Send")

        self.B_Return = QtWidgets.QPushButton(self.P_Settings)
        self.B_Return.setGeometry(QtCore.QRect(10, 10, 51, 31))
        self.B_Return.setStyleSheet("background-color: rgb(47, 47, 47);")
        icon_Return = QtGui.QIcon()
        icon_Return.addPixmap(QtGui.QPixmap("imgs/ReturnBlack.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.B_Return.setIcon(icon_Return)
        self.B_Return.setIconSize(QtCore.QSize(25, 25))
        self.B_Return.setObjectName("B_Return")

        self.L_Other = QtWidgets.QLabel(self.P_Settings)
        self.L_Other.setGeometry(QtCore.QRect(610, 100, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.L_Other.setFont(font)
        self.L_Other.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.L_Other.setObjectName("L_Other")

        self.B_SomeEvent = QtWidgets.QPushButton(self.P_Settings)
        self.B_SomeEvent.setGeometry(QtCore.QRect(610, 130, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.B_SomeEvent.setFont(font)
        self.B_SomeEvent.setStyleSheet("background-color: rgb(47, 47, 47);")
        self.B_SomeEvent.setObjectName("B_SomeEvent")

        self.stackedWidget.addWidget(self.P_Settings)
        self.verticalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        #Menu Bar / Status Bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 841, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        MainWindow.setWindowTitle(("ChAren"))
        self.B_Challenge.setText(("Challenge:\nAdapt to All Situations"))
        self.B_All.setText(("All"))
        self.B_Favorite.setText(("Favorite"))
        self.CB_Hidden.setText(("Hidden"))
        self.B_Reload.setText(("Reload"))
        self.B_Edit_Profile.setText(("Edit\nProfile"))
        if self.summonerData:
            name = self.JSON_user["name"]
            tag = self.JSON_user["tag"]
            lvl = str(self.summonerData["summonerLevel"])
            self.L_Summoner_data.setText((name + "#" + tag + "\nlvl. " + lvl))
        else:
            self.L_Summoner_data.setText(("???#???\nlvl. ???"))
        self.In_Name.setPlaceholderText(("Name"))
        self.In_Tag.setPlaceholderText(("Tag"))
        self.B_Send.setText(("Send"))
        self.L_Other.setText(("Other:"))
        self.B_SomeEvent.setText(("Some Event"))

        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Swap Widget Event
        self.B_Return.clicked.connect(self.swapWidget)
        self.B_Edit_Profile.clicked.connect(self.swapWidget)

        self.B_All.clicked.connect(lambda: self.displayChampionList(False))
        self.B_Favorite.clicked.connect(lambda: self.displayChampionList(True))

        self.B_Reload.clicked.connect(self.reload)

        self.CB_Hidden.stateChanged.connect(self.swapHidden)

        self.B_Send.clicked.connect(self.sendProfile)

        #self.B_SomeEvent
        #self.B_Challenge


    def sendProfile(self):
        self.JSON_user["name"] = self.In_Name.text()
        self.JSON_user["tag"] = self.In_Tag.text()
        self.exportJsonUser(self.JSON_user)
        self.summonerData = getSummonerData(self.JSON_user["name"], self.JSON_user["tag"])
        self.updateProfile()
        self.resetChampions()
        self.displayChampionList(None)
    
    def updateProfile(self):
        if self.summonerData:
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(getSummonerIcon(self.summonerData["profileIconId"]))
            self.L_Profile_img.setPixmap(pixmap)
            name = self.JSON_user["name"]
            tag = self.JSON_user["tag"]
            lvl = str(self.summonerData["summonerLevel"])
            self.L_Summoner_data.setText((name + "#" + tag + "\nlvl. " + lvl))
        else:
            self.L_Profile_img.setPixmap(QtGui.QPixmap("imgs/QuestionMarkWhite.png"))
            self.L_Summoner_data.setText(("???#???\nlvl. ???"))

    def resetChampions(self):
        saveData = dict(self.JSON_champions)
        saveData["all"], saveData["favorite"], saveData["hidden"] = [], [], []
        saveData["lastMatch"] = 1714000000

        saveData["all"] = self.championsList
        self.exportJsonChampion(saveData)
        self.JSON_champions = saveData

        self.updateChampions()

    def updateChampions(self):
        saveData = dict(self.JSON_champions)

        if not self.summonerData:
            return

        while True:
            matchesList = getMatches(self.summonerData["puuid"], self.JSON_champions["lastMatch"])

            if matchesList == None:
                return

            if matchesList == 429:
                time.sleep(10)
                continue

            break

        if not len(matchesList):
            return

        while True:
            matchData = getMatchData(matchesList[0])

            if matchData == None:
                return

            if matchData == 429:
                time.sleep(10)
                continue

            index = matchData["metadata"]["participants"].index(self.summonerData["puuid"])
            user = matchData["info"]["participants"][index]
            champion = user["championName"]
            position = user["placement"]

            if position == 1:
                if champion in saveData["all"]:
                    saveData["all"].remove(champion)
                    saveData["hidden"].append(champion)
                if champion in saveData["favorite"]:
                    saveData["favorite"].remove(champion)
                    saveData["hidden"].append(champion)

            lastMatch = int(matchData["info"]["gameEndTimestamp"]/1000 + 1)

            break

        for match in matchesList[1:]:
            while True:
                matchData = getMatchData(match)

                if matchData == None:
                    return

                if matchData == 429:
                    time.sleep(10)
                    continue

                index = matchData["metadata"]["participants"].index(self.summonerData["puuid"])
                user = matchData["info"]["participants"][index]
                champion = user["championName"]
                position = user["placement"]

                if position == 1:
                    if champion in saveData["all"]:
                        saveData["all"].remove(champion)
                        saveData["hidden"].append(champion)
                    if champion in saveData["favorite"]:
                        saveData["favorite"].remove(champion)
                        saveData["hidden"].append(champion)

                break
        
        saveData["lastMatch"] = lastMatch

        self.exportJsonChampion(saveData)
        self.JSON_champions = saveData

    def reload(self):
        self.updateChampions()
        self.displayChampionList(None)

    #Swap Widgets on click "Edit Profile", "Return"
    def swapWidget(self):
        self.stackedWidget.setCurrentIndex(int(not self.stackedWidget.currentIndex()))

    def importJsonChampion(self):
        try:
            with open("Champions.json", "r") as input_file:
                return json.load(input_file)
        except FileNotFoundError:
            print("File not found")

    def dataCheck(self):
        saveData = dict(self.JSON_champions)
        for champion in self.championsList:
            if champion not in self.JSON_champions["all"]+self.JSON_champions["favorite"]+self.JSON_champions["hidden"]:
                saveData["all"].append(champion)
        saveData["version"] = self.version
        self.exportJsonChampion(saveData)
        self.JSON_champions = saveData

    def exportJsonChampion(self, input):
        with open("Champions.json", 'w') as json_file:
            json.dump(input, json_file, indent=4)
    
    def importJsonUser(self):
        try:
            with open("User.json", "r") as input_file:
                return json.load(input_file)
        except FileNotFoundError:
            print("File not found")
    
    def exportJsonUser(self, input):
        with open("User.json", 'w') as json_file:
            json.dump(input, json_file, indent=4)

    def swapFavorite(self, index):
        championName = self.W_Champions[index].objectName()
        saveData = dict(self.JSON_champions)
        if championName in self.JSON_champions["favorite"]:
            self.B_Names[index].setIcon(self.iconFavOff)
            saveData["all"].append(championName)
            saveData["favorite"].remove(championName)
        else:
            self.B_Names[index].setIcon(self.iconFavOn)
            saveData["all"].remove(championName)
            saveData["favorite"].append(championName)

        self.exportJsonChampion(saveData)
        self.JSON_champions = saveData

    def swapHidden(self, state):
        self.bHidden = not state
        for champion in self.JSON_champions["hidden"]:
            index = self.championsList.index(champion)
            if state:
                self.W_Champions[index].show()
            else:
                self.W_Champions[index].hide()

    def createChampionWidgets(self):
        self.W_Champions = []
        self.B_Names = []

        i = 0
        for champion in self.championsList:
            W_Champion = QtWidgets.QWidget(self.SA_Champion_List)
            W_Champion.setMinimumSize(QtCore.QSize(100, 120))
            W_Champion.setMaximumSize(QtCore.QSize(100, 120))
            W_Champion.setObjectName(champion)
            VL_Champion = QtWidgets.QVBoxLayout(W_Champion)
            VL_Champion.setContentsMargins(0, 5, 0, 5)
            VL_Champion.setSpacing(0)
            VL_Champion.setObjectName("VL_Champion")
            W_Img = QtWidgets.QWidget(W_Champion)
            W_Img.setObjectName("W_Img")
            HL_Img = QtWidgets.QHBoxLayout(W_Img)
            HL_Img.setContentsMargins(0, 0, 0, 0)
            HL_Img.setSpacing(0)
            HL_Img.setObjectName("HL_Img")
            L_Img = QtWidgets.QLabel(W_Img)
            L_Img.setMinimumSize(QtCore.QSize(85, 85))
            L_Img.setMaximumSize(QtCore.QSize(85, 85))
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(getChampionImg(champion))
            L_Img.setPixmap(pixmap)
            L_Img.setScaledContents(True)
            L_Img.setObjectName("L_Img")
            HL_Img.addWidget(L_Img)
            VL_Champion.addWidget(W_Img)
            B_Name = QtWidgets.QPushButton(W_Champion)
            B_Name.setMaximumSize(QtCore.QSize(16777215, 21))
            B_Name.setPalette(self.palette_Champ)
            B_Name.setStyleSheet("background-color: transparent;")
            B_Name.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
            B_Name.setIcon(self.iconFavOff)
            B_Name.setFlat(True)
            B_Name.setText(self.championsData[champion]["name"])
            B_Name.setObjectName("B_Name")
            VL_Champion.addWidget(B_Name)

            self.B_Names.append(B_Name)
            self.W_Champions.append(W_Champion)

            self.B_Names[i].clicked.connect(lambda ch, i=i: self.swapFavorite(i))

            i += 1

        for champion in self.JSON_champions["favorite"]:
            index = self.championsList.index(champion)
            self.B_Names[index].setIcon(self.iconFavOn)

        for champion in self.JSON_champions["hidden"]:
            index = self.championsList.index(champion)
            self.W_Champions[index].setEnabled(False)
            self.W_Champions[index].hide()


    def displayChampionList(self, bFavorite):
        self.WSA_Champion_List = QtWidgets.QWidget()
        self.WSA_Champion_List.setObjectName("WSA_Champion_List")
        self.VL_Champion_List = QtWidgets.QVBoxLayout(self.WSA_Champion_List)
        self.VL_Champion_List.setContentsMargins(0, 0, 0, 0)
        self.VL_Champion_List.setSpacing(0)
        self.VL_Champion_List.setObjectName("VL_Champion_List")

        favoriteList = sorted(self.JSON_champions["favorite"])+sorted(self.JSON_champions["all"])+sorted(self.JSON_champions["hidden"])
        allList = sorted(self.JSON_champions["favorite"]+self.JSON_champions["all"])+sorted(self.JSON_champions["hidden"])

        if bFavorite != None:
            self.bFavorite = bFavorite

        if self.bFavorite:
            championList = favoriteList
        else:
            championList = allList

        i = 0
        for champion in championList:
            if i == 0:
                W_Row = QtWidgets.QWidget(self.WSA_Champion_List)
                W_Row.setMinimumSize(QtCore.QSize(0, 120))
                W_Row.setMaximumSize(QtCore.QSize(16777215, 120))
                W_Row.setObjectName("W_Row")
                HL_Row = QtWidgets.QHBoxLayout(W_Row)
                HL_Row.setContentsMargins(0, 0, 0, 0)
                HL_Row.setSpacing(0)
                HL_Row.setObjectName("HL_Row")

            index = self.championsList.index(champion)
            W_Champion = self.W_Champions[index]

            HL_Row.addWidget(W_Champion)
            i += 1

            if i == 10 or champion == championList[-1]:
                HLspacer = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                HL_Row.addItem(HLspacer)
                self.VL_Champion_List.addWidget(W_Row)

                i = 0

        for champion in self.JSON_champions["hidden"]:
            index = self.championsList.index(champion)
            self.W_Champions[index].setEnabled(False)

        VLspacer = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.VL_Champion_List.addItem(VLspacer)
        self.SA_Champion_List.setWidget(self.WSA_Champion_List)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
